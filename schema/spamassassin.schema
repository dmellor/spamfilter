--
-- PostgreSQL database dump
--

SET client_encoding = 'SQL_ASCII';
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA public IS 'Standard public schema';


--
-- Name: plpgsql; Type: PROCEDURAL LANGUAGE; Schema: -; Owner: 
--

CREATE PROCEDURAL LANGUAGE plpgsql;


SET search_path = public, pg_catalog;

--
-- Name: convert_blacklist(); Type: FUNCTION; Schema: public; Owner: david
--

CREATE FUNCTION convert_blacklist() RETURNS "trigger"
    AS '
begin
	if TG_OP = ''INSERT'' then
		NEW.regexp = generateRegexp(NEW.mail_from);
	elsif TG_OP = ''UPDATE'' and
		(NEW.mail_from != OLD.mail_from or NEW.regexp != OLD.regexp) then
		NEW.regexp = generateRegexp(NEW.mail_from);
	end if;

	return NEW;
end;'
    LANGUAGE plpgsql;


ALTER FUNCTION public.convert_blacklist() OWNER TO david;

--
-- Name: convert_original(); Type: FUNCTION; Schema: public; Owner: david
--

CREATE FUNCTION convert_original() RETURNS "trigger"
    AS '
begin
	if TG_OP = ''INSERT'' then
		NEW.regexp = generateRegexp(NEW.original);
	elsif TG_OP = ''UPDATE'' and
		(NEW.original != OLD.original or NEW.regexp != OLD.regexp) then
		NEW.regexp = generateRegexp(NEW.original);
	end if;

	return NEW;
end;'
    LANGUAGE plpgsql;


ALTER FUNCTION public.convert_original() OWNER TO david;

--
-- Name: convert_whitelist_from(); Type: FUNCTION; Schema: public; Owner: david
--

CREATE FUNCTION convert_whitelist_from() RETURNS "trigger"
    AS '
begin
	if TG_OP = ''INSERT'' then
		NEW.regexp = generateRegexp(NEW.mail_from);
	elsif TG_OP = ''UPDATE'' and
		(NEW.mail_from != OLD.mail_from or NEW.regexp != OLD.regexp) then
		NEW.regexp = generateRegexp(NEW.mail_from);
	end if;

	return NEW;
end;'
    LANGUAGE plpgsql;


ALTER FUNCTION public.convert_whitelist_from() OWNER TO david;

--
-- Name: extract_header(text, text); Type: FUNCTION; Schema: public; Owner: david
--

CREATE FUNCTION extract_header(text, text) RETURNS text
    AS 'DECLARE
	header ALIAS FOR $1;
	content ALIAS FOR $2;
	startPos integer;
	endPos integer;
	headerString text DEFAULT NULL;
	headerText text DEFAULT NULL;
BEGIN
	headerString := ''
'' || header || '':'';	
	startPos := strpos(content, headerString);
	IF startPos > 0 THEN
		headerText := substr(content, startPos + length(headerString),
			length(content) - startPos - length(headerString));
		endPos := strpos(headerText, ''
'');
		headerText := substr(headerText, 1, endPos - 1);
	END IF;

	headerText := trim(both from headerText);

	RETURN headerText;
END;'
    LANGUAGE plpgsql IMMUTABLE STRICT;


ALTER FUNCTION public.extract_header(text, text) OWNER TO david;

--
-- Name: generateregexp(text); Type: FUNCTION; Schema: public; Owner: david
--

CREATE FUNCTION generateregexp(text) RETURNS text
    AS E'
declare
	orig alias for $1;
	regexp text;
	index integer;
	c text;
begin
	regexp := ''^'';
	for index in 1 .. length(orig) loop
		c := substr(orig, index, 1);
		if c = ''+'' then
			regexp := regexp || ''\\\\+'';
		elsif c = ''.'' then
			regexp := regexp || ''\\\\.'';
		elsif c = ''*'' then
			regexp := regexp || ''.*'';
		else
			regexp := regexp || c;
		end if;
	end loop;

	regexp := regexp || ''$'';

	return regexp;
end;'
    LANGUAGE plpgsql IMMUTABLE STRICT;


ALTER FUNCTION public.generateregexp(text) OWNER TO david;

--
-- Name: plpgsql_call_handler(); Type: FUNCTION; Schema: public; Owner: root
--

CREATE FUNCTION plpgsql_call_handler() RETURNS language_handler
    AS '$libdir/plpgsql', 'plpgsql_call_handler'
    LANGUAGE c;


ALTER FUNCTION public.plpgsql_call_handler() OWNER TO root;

--
-- Name: stamp(); Type: FUNCTION; Schema: public; Owner: david
--

CREATE FUNCTION stamp() RETURNS "trigger"
    AS '
BEGIN
	NEW.modified := ''now'';
	RETURN NEW;
END;
'
    LANGUAGE plpgsql;


ALTER FUNCTION public.stamp() OWNER TO david;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: auto_whitelist; Type: TABLE; Schema: public; Owner: david; Tablespace: 
--

CREATE TABLE auto_whitelist (
    id integer DEFAULT nextval(('auto_whitelist_id_seq'::text)::regclass) NOT NULL,
    username character varying(1024) NOT NULL,
    email character varying(1024) NOT NULL,
    ip character varying(15) NOT NULL,
    count integer NOT NULL,
    totscore double precision NOT NULL,
    created timestamp with time zone DEFAULT now() NOT NULL,
    modified timestamp with time zone NOT NULL
);


ALTER TABLE public.auto_whitelist OWNER TO david;

--
-- Name: auto_whitelist_id_seq; Type: SEQUENCE; Schema: public; Owner: david
--

CREATE SEQUENCE auto_whitelist_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.auto_whitelist_id_seq OWNER TO david;

--
-- Name: domain_names; Type: TABLE; Schema: public; Owner: david; Tablespace: 
--

CREATE TABLE domain_names (
    "domain" character varying(255) NOT NULL,
    display character varying(255) NOT NULL
);


ALTER TABLE public.domain_names OWNER TO david;

--
-- Name: greylist; Type: TABLE; Schema: public; Owner: david; Tablespace: 
--

CREATE TABLE greylist (
    id integer DEFAULT nextval(('greylist_id_seq'::text)::regclass) NOT NULL,
    ip_address character varying(11) NOT NULL,
    mail_from character varying(1024),
    rcpt_to character varying(1024) NOT NULL,
    created timestamp with time zone DEFAULT now() NOT NULL,
    modified timestamp with time zone NOT NULL,
    successful integer DEFAULT 0 NOT NULL,
    unsuccessful integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.greylist OWNER TO david;

--
-- Name: greylist_id_seq; Type: SEQUENCE; Schema: public; Owner: david
--

CREATE SEQUENCE greylist_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.greylist_id_seq OWNER TO david;

--
-- Name: quarantine_recipients; Type: TABLE; Schema: public; Owner: david; Tablespace: 
--

CREATE TABLE quarantine_recipients (
    id integer DEFAULT nextval(('quarantine_recipients_id_seq'::text)::regclass) NOT NULL,
    original character varying(255) NOT NULL,
    delivery character varying(255) NOT NULL,
    regexp character varying(255) NOT NULL
);


ALTER TABLE public.quarantine_recipients OWNER TO david;

--
-- Name: quarantine_recipients_id_seq; Type: SEQUENCE; Schema: public; Owner: david
--

CREATE SEQUENCE quarantine_recipients_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.quarantine_recipients_id_seq OWNER TO david;

--
-- Name: spam_id_seq; Type: SEQUENCE; Schema: public; Owner: david
--

CREATE SEQUENCE spam_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.spam_id_seq OWNER TO david;

--
-- Name: spam; Type: TABLE; Schema: public; Owner: david; Tablespace: 
--

CREATE TABLE spam (
    id integer DEFAULT nextval('spam_id_seq'::regclass) NOT NULL,
    mail_from character varying(1024),
    ip_address character varying(15) NOT NULL,
    helo character varying(1024) NOT NULL,
    contents text NOT NULL,
    score double precision NOT NULL,
    tests text NOT NULL,
    created timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.spam OWNER TO david;

--
-- Name: spam_recipients; Type: TABLE; Schema: public; Owner: david; Tablespace: 
--

CREATE TABLE spam_recipients (
    id integer DEFAULT nextval(('spam_recipients_id_seq'::text)::regclass) NOT NULL,
    recipient character varying(1024) NOT NULL,
    spam_id integer NOT NULL,
    delivery_id character varying(32)
);


ALTER TABLE public.spam_recipients OWNER TO david;

--
-- Name: spam_recipients_id_seq; Type: SEQUENCE; Schema: public; Owner: david
--

CREATE SEQUENCE spam_recipients_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.spam_recipients_id_seq OWNER TO david;

--
-- Name: virus_recipients; Type: TABLE; Schema: public; Owner: david; Tablespace: 
--

CREATE TABLE virus_recipients (
    id integer DEFAULT nextval(('virus_recipients_id_seq'::text)::regclass) NOT NULL,
    recipient character varying(1024) NOT NULL,
    virus_id integer NOT NULL
);


ALTER TABLE public.virus_recipients OWNER TO david;

--
-- Name: virus_recipients_id_seq; Type: SEQUENCE; Schema: public; Owner: david
--

CREATE SEQUENCE virus_recipients_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.virus_recipients_id_seq OWNER TO david;

--
-- Name: viruses_id_seq; Type: SEQUENCE; Schema: public; Owner: david
--

CREATE SEQUENCE viruses_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.viruses_id_seq OWNER TO david;

--
-- Name: viruses; Type: TABLE; Schema: public; Owner: david; Tablespace: 
--

CREATE TABLE viruses (
    id integer DEFAULT nextval('viruses_id_seq'::regclass) NOT NULL,
    mail_from character varying(1024),
    ip_address character varying(15) NOT NULL,
    helo character varying(1024) NOT NULL,
    contents text NOT NULL,
    virus character varying(1024) NOT NULL,
    created timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.viruses OWNER TO david;

--
-- Name: whitelist_from_id_seq; Type: SEQUENCE; Schema: public; Owner: david
--

CREATE SEQUENCE whitelist_from_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.whitelist_from_id_seq OWNER TO david;

--
-- Name: auto_whitelist_pkey; Type: CONSTRAINT; Schema: public; Owner: david; Tablespace: 
--

ALTER TABLE ONLY auto_whitelist
    ADD CONSTRAINT auto_whitelist_pkey PRIMARY KEY (id);


--
-- Name: domain_names_domain_key; Type: CONSTRAINT; Schema: public; Owner: david; Tablespace: 
--

ALTER TABLE ONLY domain_names
    ADD CONSTRAINT domain_names_domain_key UNIQUE ("domain");


--
-- Name: greylist_pkey; Type: CONSTRAINT; Schema: public; Owner: david; Tablespace: 
--

ALTER TABLE ONLY greylist
    ADD CONSTRAINT greylist_pkey PRIMARY KEY (id);


--
-- Name: quarantine_recipients_original_index; Type: CONSTRAINT; Schema: public; Owner: david; Tablespace: 
--

ALTER TABLE ONLY quarantine_recipients
    ADD CONSTRAINT quarantine_recipients_original_index UNIQUE (original);


--
-- Name: quarantine_recipients_pkey; Type: CONSTRAINT; Schema: public; Owner: david; Tablespace: 
--

ALTER TABLE ONLY quarantine_recipients
    ADD CONSTRAINT quarantine_recipients_pkey PRIMARY KEY (id);


--
-- Name: spam_pkey; Type: CONSTRAINT; Schema: public; Owner: david; Tablespace: 
--

ALTER TABLE ONLY spam
    ADD CONSTRAINT spam_pkey PRIMARY KEY (id);


--
-- Name: spam_recipients_pkey; Type: CONSTRAINT; Schema: public; Owner: david; Tablespace: 
--

ALTER TABLE ONLY spam_recipients
    ADD CONSTRAINT spam_recipients_pkey PRIMARY KEY (id);


--
-- Name: virus_recipients_pkey; Type: CONSTRAINT; Schema: public; Owner: david; Tablespace: 
--

ALTER TABLE ONLY virus_recipients
    ADD CONSTRAINT virus_recipients_pkey PRIMARY KEY (id);


--
-- Name: viruses_pkey; Type: CONSTRAINT; Schema: public; Owner: david; Tablespace: 
--

ALTER TABLE ONLY viruses
    ADD CONSTRAINT viruses_pkey PRIMARY KEY (id);


--
-- Name: auto_whitelist_address_index; Type: INDEX; Schema: public; Owner: david; Tablespace: 
--

CREATE UNIQUE INDEX auto_whitelist_address_index ON auto_whitelist USING btree (username, email, ip);


--
-- Name: greylist_ip_address; Type: INDEX; Schema: public; Owner: david; Tablespace: 
--

CREATE INDEX greylist_ip_address ON greylist USING btree (ip_address);


--
-- Name: greylist_mail_from; Type: INDEX; Schema: public; Owner: david; Tablespace: 
--

CREATE INDEX greylist_mail_from ON greylist USING btree (mail_from);


--
-- Name: greylist_tuple; Type: INDEX; Schema: public; Owner: david; Tablespace: 
--

CREATE UNIQUE INDEX greylist_tuple ON greylist USING btree (ip_address, mail_from, rcpt_to);


--
-- Name: spam_helo; Type: INDEX; Schema: public; Owner: david; Tablespace: 
--

CREATE INDEX spam_helo ON spam USING btree (helo);


--
-- Name: spam_ip_address; Type: INDEX; Schema: public; Owner: david; Tablespace: 
--

CREATE INDEX spam_ip_address ON spam USING btree (ip_address);


--
-- Name: auto_whitelist_stamp; Type: TRIGGER; Schema: public; Owner: david
--

CREATE TRIGGER auto_whitelist_stamp
    BEFORE INSERT OR UPDATE ON auto_whitelist
    FOR EACH ROW
    EXECUTE PROCEDURE stamp();


--
-- Name: greylist_stamp; Type: TRIGGER; Schema: public; Owner: david
--

CREATE TRIGGER greylist_stamp
    BEFORE INSERT OR UPDATE ON greylist
    FOR EACH ROW
    EXECUTE PROCEDURE stamp();


--
-- Name: quarantine_recipients_regexp; Type: TRIGGER; Schema: public; Owner: david
--

CREATE TRIGGER quarantine_recipients_regexp
    BEFORE INSERT OR UPDATE ON quarantine_recipients
    FOR EACH ROW
    EXECUTE PROCEDURE convert_original();


--
-- Name: spam_recipients_fkey; Type: FK CONSTRAINT; Schema: public; Owner: david
--

ALTER TABLE ONLY spam_recipients
    ADD CONSTRAINT spam_recipients_fkey FOREIGN KEY (spam_id) REFERENCES spam(id) ON DELETE CASCADE;


--
-- Name: virus_recipients_fkey; Type: FK CONSTRAINT; Schema: public; Owner: david
--

ALTER TABLE ONLY virus_recipients
    ADD CONSTRAINT virus_recipients_fkey FOREIGN KEY (virus_id) REFERENCES viruses(id) ON DELETE CASCADE;


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- Name: auto_whitelist; Type: ACL; Schema: public; Owner: david
--

REVOKE ALL ON TABLE auto_whitelist FROM PUBLIC;
REVOKE ALL ON TABLE auto_whitelist FROM david;
GRANT ALL ON TABLE auto_whitelist TO david;
GRANT INSERT,SELECT,UPDATE,DELETE ON TABLE auto_whitelist TO qmail;


--
-- Name: auto_whitelist_id_seq; Type: ACL; Schema: public; Owner: david
--

REVOKE ALL ON TABLE auto_whitelist_id_seq FROM PUBLIC;
REVOKE ALL ON TABLE auto_whitelist_id_seq FROM david;
GRANT ALL ON TABLE auto_whitelist_id_seq TO david;
GRANT INSERT,SELECT,UPDATE,DELETE ON TABLE auto_whitelist_id_seq TO qmail;


--
-- Name: domain_names; Type: ACL; Schema: public; Owner: david
--

REVOKE ALL ON TABLE domain_names FROM PUBLIC;
REVOKE ALL ON TABLE domain_names FROM david;
GRANT ALL ON TABLE domain_names TO david;
GRANT SELECT ON TABLE domain_names TO qmail;


--
-- Name: greylist; Type: ACL; Schema: public; Owner: david
--

REVOKE ALL ON TABLE greylist FROM PUBLIC;
REVOKE ALL ON TABLE greylist FROM david;
GRANT ALL ON TABLE greylist TO david;
GRANT INSERT,SELECT,UPDATE,DELETE ON TABLE greylist TO qmail;


--
-- Name: greylist_id_seq; Type: ACL; Schema: public; Owner: david
--

REVOKE ALL ON TABLE greylist_id_seq FROM PUBLIC;
REVOKE ALL ON TABLE greylist_id_seq FROM david;
GRANT ALL ON TABLE greylist_id_seq TO david;
GRANT INSERT,SELECT,UPDATE,DELETE ON TABLE greylist_id_seq TO qmail;


--
-- Name: quarantine_recipients; Type: ACL; Schema: public; Owner: david
--

REVOKE ALL ON TABLE quarantine_recipients FROM PUBLIC;
REVOKE ALL ON TABLE quarantine_recipients FROM david;
GRANT ALL ON TABLE quarantine_recipients TO david;
GRANT SELECT ON TABLE quarantine_recipients TO qmail;


--
-- Name: spam_id_seq; Type: ACL; Schema: public; Owner: david
--

REVOKE ALL ON TABLE spam_id_seq FROM PUBLIC;
REVOKE ALL ON TABLE spam_id_seq FROM david;
GRANT ALL ON TABLE spam_id_seq TO david;
GRANT INSERT,SELECT,UPDATE,DELETE ON TABLE spam_id_seq TO qmail;


--
-- Name: spam; Type: ACL; Schema: public; Owner: david
--

REVOKE ALL ON TABLE spam FROM PUBLIC;
REVOKE ALL ON TABLE spam FROM david;
GRANT ALL ON TABLE spam TO david;
GRANT INSERT,SELECT,UPDATE,DELETE ON TABLE spam TO qmail;


--
-- Name: spam_recipients; Type: ACL; Schema: public; Owner: david
--

REVOKE ALL ON TABLE spam_recipients FROM PUBLIC;
REVOKE ALL ON TABLE spam_recipients FROM david;
GRANT ALL ON TABLE spam_recipients TO david;
GRANT INSERT,SELECT,UPDATE,DELETE ON TABLE spam_recipients TO qmail;


--
-- Name: spam_recipients_id_seq; Type: ACL; Schema: public; Owner: david
--

REVOKE ALL ON TABLE spam_recipients_id_seq FROM PUBLIC;
REVOKE ALL ON TABLE spam_recipients_id_seq FROM david;
GRANT ALL ON TABLE spam_recipients_id_seq TO david;
GRANT INSERT,SELECT,UPDATE,DELETE ON TABLE spam_recipients_id_seq TO qmail;


--
-- Name: virus_recipients; Type: ACL; Schema: public; Owner: david
--

REVOKE ALL ON TABLE virus_recipients FROM PUBLIC;
REVOKE ALL ON TABLE virus_recipients FROM david;
GRANT ALL ON TABLE virus_recipients TO david;
GRANT INSERT,SELECT,UPDATE,DELETE ON TABLE virus_recipients TO qmail;


--
-- Name: virus_recipients_id_seq; Type: ACL; Schema: public; Owner: david
--

REVOKE ALL ON TABLE virus_recipients_id_seq FROM PUBLIC;
REVOKE ALL ON TABLE virus_recipients_id_seq FROM david;
GRANT ALL ON TABLE virus_recipients_id_seq TO david;
GRANT INSERT,SELECT,UPDATE,DELETE ON TABLE virus_recipients_id_seq TO qmail;


--
-- Name: viruses_id_seq; Type: ACL; Schema: public; Owner: david
--

REVOKE ALL ON TABLE viruses_id_seq FROM PUBLIC;
REVOKE ALL ON TABLE viruses_id_seq FROM david;
GRANT ALL ON TABLE viruses_id_seq TO david;
GRANT INSERT,SELECT,UPDATE,DELETE ON TABLE viruses_id_seq TO qmail;


--
-- Name: viruses; Type: ACL; Schema: public; Owner: david
--

REVOKE ALL ON TABLE viruses FROM PUBLIC;
REVOKE ALL ON TABLE viruses FROM david;
GRANT ALL ON TABLE viruses TO david;
GRANT INSERT,SELECT,UPDATE,DELETE ON TABLE viruses TO qmail;


--
-- PostgreSQL database dump complete
--

